// <auto-generated />
using System;
using BlackJackDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlackJackDataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190328120806_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlackJackEntities.Entities.Card", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("Rank");

                    b.Property<int>("Suit");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new { Id = "4ab6477d-fdc8-4074-b144-51c7107e1035", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 2, Suit = 0, Value = 2 },
                        new { Id = "92e942ea-8708-4960-90d1-4dc82e0655b7", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 3, Suit = 0, Value = 3 },
                        new { Id = "1d46fdba-9d7b-47ba-ab07-bb68c88a5b45", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 4, Suit = 0, Value = 4 },
                        new { Id = "e0d09831-baae-4c75-abf0-26ca8b5d0b80", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 5, Suit = 0, Value = 5 },
                        new { Id = "1e3d2275-867b-4e82-a4b8-88f0679269ca", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 6, Suit = 0, Value = 6 },
                        new { Id = "703c1003-5c43-4b03-8494-2933050ab525", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 7, Suit = 0, Value = 7 },
                        new { Id = "724a528e-eafb-4043-b42d-a36d77a43d77", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 8, Suit = 0, Value = 8 },
                        new { Id = "462218a1-e585-44ce-bc5f-3e72a0762d12", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 9, Suit = 0, Value = 9 },
                        new { Id = "87bc428d-a26d-4c1c-a035-6d06067a9db2", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 10, Suit = 0, Value = 10 },
                        new { Id = "eb7b9b8b-97ad-4cfa-b063-f8e131e877d3", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 11, Suit = 0, Value = 10 },
                        new { Id = "0a40d61f-cd92-4deb-ba26-715ba48aa1d0", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 12, Suit = 0, Value = 10 },
                        new { Id = "2645111f-9c2c-49ac-a216-3d07a3468821", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 13, Suit = 0, Value = 10 },
                        new { Id = "06e4e35e-fec0-49f2-896a-ed8fa08363eb", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 14, Suit = 0, Value = 11 },
                        new { Id = "8d8bc5d6-b49e-436e-b65a-4d594c71aa20", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 2, Suit = 1, Value = 2 },
                        new { Id = "516361d4-b327-4eff-8d1b-ff857e6dea7e", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 3, Suit = 1, Value = 3 },
                        new { Id = "38724cc3-8800-4313-a834-cfa7c211ea01", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 4, Suit = 1, Value = 4 },
                        new { Id = "0a3bb7cf-ac21-47a3-933e-7cfb80f7d5a1", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 5, Suit = 1, Value = 5 },
                        new { Id = "0f8dcab7-6130-4e0e-a8e9-39fed1564267", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 6, Suit = 1, Value = 6 },
                        new { Id = "b3418895-f446-4f77-b649-6b1b295102a6", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 7, Suit = 1, Value = 7 },
                        new { Id = "34f8e200-496b-4fdf-aa14-cf91196117ed", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 8, Suit = 1, Value = 8 },
                        new { Id = "c6a9358d-c646-47f7-bcd3-72d196e6ef82", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 9, Suit = 1, Value = 9 },
                        new { Id = "decd5d5c-1061-4adf-bc4b-43cd27a86e01", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 10, Suit = 1, Value = 10 },
                        new { Id = "73be72d5-27e2-4ae8-82b6-ce8df86c8fc4", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 11, Suit = 1, Value = 10 },
                        new { Id = "85f29436-d18e-456a-a5bb-bab851c00cd8", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 12, Suit = 1, Value = 10 },
                        new { Id = "ea9b9672-d0e4-4093-b771-d1abbe1736f1", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 13, Suit = 1, Value = 10 },
                        new { Id = "4921d9bb-657c-483b-8a3b-2464814682a6", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 14, Suit = 1, Value = 11 },
                        new { Id = "555fb5a4-75c0-4bf9-9d8b-515d90d24c73", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 2, Suit = 2, Value = 2 },
                        new { Id = "5e5835c7-7348-4fce-9f7f-33ef30a1b474", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 3, Suit = 2, Value = 3 },
                        new { Id = "77284f6a-9bcf-4b1c-8d58-58cc9a60fecc", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 4, Suit = 2, Value = 4 },
                        new { Id = "a6860635-1f89-4c53-b7fd-b9a3f262cb26", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 5, Suit = 2, Value = 5 },
                        new { Id = "5723fc1c-25b1-4c6b-ae9a-789392b2c8e8", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 6, Suit = 2, Value = 6 },
                        new { Id = "5aec853d-6718-45ab-b9ec-3478b874ab78", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 7, Suit = 2, Value = 7 },
                        new { Id = "df5b643d-f592-43b7-a192-1a735a6b7bcd", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 8, Suit = 2, Value = 8 },
                        new { Id = "0707e3f4-6993-46d1-aae5-0691c43dff47", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 9, Suit = 2, Value = 9 },
                        new { Id = "78d6e5a9-256e-4233-9ea8-8a74f15521d9", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 10, Suit = 2, Value = 10 },
                        new { Id = "b3a485a7-0d8b-4244-aca0-ea52a0be808a", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 11, Suit = 2, Value = 10 },
                        new { Id = "ba0b3c63-1b3c-4e90-abad-69ccead82071", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 12, Suit = 2, Value = 10 },
                        new { Id = "7cd7eedd-96c9-4fd9-9f5b-a5e6d64c18d5", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 13, Suit = 2, Value = 10 },
                        new { Id = "63af849f-d399-4b45-8e0c-341d596908ea", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 14, Suit = 2, Value = 11 },
                        new { Id = "a9dc3608-7cb1-4948-93c9-fef7ce4cd4a2", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 2, Suit = 3, Value = 2 },
                        new { Id = "0bbf7e6e-fee6-4b8b-8c3f-3fca3c8e5cb1", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 3, Suit = 3, Value = 3 },
                        new { Id = "4d520593-9ea1-42ea-a791-1e279f6a0119", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 4, Suit = 3, Value = 4 },
                        new { Id = "a960bdfb-52d0-4f3a-8dff-94ef2a26c740", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 5, Suit = 3, Value = 5 },
                        new { Id = "31a9689f-b343-44e9-9cf5-37852c92612f", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 6, Suit = 3, Value = 6 },
                        new { Id = "19cce115-56dd-4e41-83fd-41abcd85e79a", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 7, Suit = 3, Value = 7 },
                        new { Id = "bf4b2fb4-fbba-4752-b6b2-f2018949d144", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 8, Suit = 3, Value = 8 },
                        new { Id = "fbbcca32-4f14-437e-be3e-a4a92c939662", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 9, Suit = 3, Value = 9 },
                        new { Id = "fe61f97f-8ea8-4db3-bba8-9956ec39f231", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 10, Suit = 3, Value = 10 },
                        new { Id = "6dcecd2f-9bc8-4e69-be8f-28ab3198a47d", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 11, Suit = 3, Value = 10 },
                        new { Id = "089c8111-040b-401a-aba3-11deff68b6ed", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 12, Suit = 3, Value = 10 },
                        new { Id = "4107e1f5-4447-480a-bb7c-7cdab65f303f", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 13, Suit = 3, Value = 10 },
                        new { Id = "3e602150-572a-4a6f-bf53-25e1bfadf4db", CreationDate = new DateTime(2019, 3, 28, 12, 8, 6, 535, DateTimeKind.Utc), Rank = 14, Suit = 3, Value = 11 }
                    );
                });

            modelBuilder.Entity("BlackJackEntities.Entities.CardMove", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("GameId");

                    b.Property<int>("Move");

                    b.Property<string>("Name");

                    b.Property<string>("PlayerId");

                    b.Property<string>("Role");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("GameId");

                    b.ToTable("CardMoves");
                });

            modelBuilder.Entity("BlackJackEntities.Entities.Game", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("BlackJackEntities.Entities.GameUsers", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("GameId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUsers");
                });

            modelBuilder.Entity("BlackJackEntities.Entities.Player", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("Points");

                    b.Property<string>("Role");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a6583e4d-2eb4-4d81-9313-f44d33d95ef9", AccessFailedCount = 0, ConcurrencyStamp = "5e52b378-5d00-47af-a419-cb84d8d137e1", EmailConfirmed = false, LockoutEnabled = false, PhoneNumberConfirmed = false, Points = 0, Role = "Bot", TwoFactorEnabled = false, UserName = "Dialer" },
                        new { Id = "4423858f-94dd-4ee6-a118-c7325ccaebbb", AccessFailedCount = 0, ConcurrencyStamp = "bf642d04-15af-4ce3-a831-368254b978ee", EmailConfirmed = false, LockoutEnabled = false, PhoneNumberConfirmed = false, Points = 0, Role = "Bot", TwoFactorEnabled = false, UserName = "Bot 1" },
                        new { Id = "abd81ce6-627b-447e-88ad-ce510a287532", AccessFailedCount = 0, ConcurrencyStamp = "357b18e5-1b0c-48b7-bbd1-71091b43f080", EmailConfirmed = false, LockoutEnabled = false, PhoneNumberConfirmed = false, Points = 0, Role = "Bot", TwoFactorEnabled = false, UserName = "Bot 2" },
                        new { Id = "8c29aad4-4d98-4123-a8f6-9361af069589", AccessFailedCount = 0, ConcurrencyStamp = "b99338f7-5db1-4418-b20a-0dedcc8bf23d", EmailConfirmed = false, LockoutEnabled = false, PhoneNumberConfirmed = false, Points = 0, Role = "Bot", TwoFactorEnabled = false, UserName = "Bot 3" },
                        new { Id = "fbf24687-8407-4221-aca5-1b5d9f15dd14", AccessFailedCount = 0, ConcurrencyStamp = "77c2eb8d-d6c0-4c0c-b6e6-e1b7d9083f44", EmailConfirmed = false, LockoutEnabled = false, PhoneNumberConfirmed = false, Points = 0, Role = "Bot", TwoFactorEnabled = false, UserName = "Bot 4" },
                        new { Id = "77dea9f7-e997-421e-be8a-2c675073bbac", AccessFailedCount = 0, ConcurrencyStamp = "94cc5fa2-4a80-475a-9443-9ddc3ca06564", EmailConfirmed = false, LockoutEnabled = false, PhoneNumberConfirmed = false, Points = 0, Role = "Bot", TwoFactorEnabled = false, UserName = "Bot 5" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BlackJackEntities.Entities.CardMove", b =>
                {
                    b.HasOne("BlackJackEntities.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("BlackJackEntities.Entities.Game", "Game")
                        .WithMany("CardMoves")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("BlackJackEntities.Entities.GameUsers", b =>
                {
                    b.HasOne("BlackJackEntities.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("BlackJackEntities.Entities.Player", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlackJackEntities.Entities.Player")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlackJackEntities.Entities.Player")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlackJackEntities.Entities.Player")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlackJackEntities.Entities.Player")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
